package com.mast.readup.entities;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Min;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;

/**
 * This class represents the "libro" (book) entity in the database.
 * It uses Lombok to reduce boilerplate code and JPA annotations for ORM
 * mapping.
 */

@Entity
@Table(name = "libro")
@Data
@NoArgsConstructor // Lombok: Generates a no-argument constructor (required by JPA
@AllArgsConstructor // Lombok: Generates a constructor with all fields
@EqualsAndHashCode(onlyExplicitlyIncluded = true) // Lombok: Limits equality to specified fields
public class Libro {

    // Primary key class Libro, auto-generated by the database
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id_libro")
    private long idLibro; // @GeneratedValue(strategy = GenerationType.IDENTITY)

    // Add the extra field of the entity
    // Publication year (date-only), using Java 8 LocalDate
    @Column(name = "anno_uscita", nullable = true)
    private Date annoUscita;

    // Number of pages, cannot be less than 40 page
    @Column(name = "num_pagine", nullable = false)
    @Min(30)
    private int numPagine;

    // Book genre, must not be blank
    @Column(name = "genere", length = 50, nullable = true)
    private String genere;

    // Book author, required field
    @Column(name = "autore", length = 100, nullable = true)
    private String autore;

    // Book title, required field
    @Column(name = "titolo", length = 200, nullable = true)
    private String titolo;

    // Optional publisher name
    @Column(name = "casa_editrice", length = 100)
    private String casaEditrice;

    // One-to-many relationship with the Libreria entity (bridge table)
    @OneToMany(mappedBy = "libro", cascade = CascadeType.ALL, orphanRemoval = true)
    private Set<Libreria> librerie = new HashSet<>();

    // One-to-many relationship with the Contiene entity (another bridge table)
    @OneToMany(mappedBy = "libro", cascade = CascadeType.ALL, orphanRemoval = true)
    private Set<BooklistContiene> contenuti = new HashSet<>();

}
