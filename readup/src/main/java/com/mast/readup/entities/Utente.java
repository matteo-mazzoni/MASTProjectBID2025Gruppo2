package com.mast.readup.entities;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Lob;
import jakarta.persistence.Table;
import jakarta.persistence.Transient;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;

/**
 * This class represents the "utente" entity in the database.
 * It uses Lombok to reduce boilerplate code and JPA annotations for ORM
 * mapping.
 */

@Entity
@Table(name = "utente")
@Data
@NoArgsConstructor // Lombok: Generates a no-argument constructor (required by JPA
@AllArgsConstructor // Lombok: Generates a constructor with all fields
@EqualsAndHashCode(onlyExplicitlyIncluded = true) // Lombok: Limits equality to specified fields
public class Utente {

    // Primary key class Utente, auto-generated by the database
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id_utente")
    private Long idUtente;

    // Add the extra field of the entity
    // User nikname, required field
    @Column(name = "nickname", length = 100, nullable = false)
    @NotBlank
    private String nickname;

    // User password can't be null
    @Column(name = "password", length = 200, nullable = false)
    @NotBlank
    @Size(min = 8) 
    private String password;

    // User email is a required filed
    @Column(name = "email", length = 30, nullable = false)
    @Email(message = "Inserisci un'email valida")
    @NotBlank
    private String email;

    // User citta can be null
    @Column(name = "citta", length = 70, nullable = true)
    private String citta;

    // User loggedIn
    @Column(name = "loggedIn", nullable = false)
    private boolean loggedIn = false;

    // User profile image, can be null
    @Lob 
    @Column(name = "profile_image", columnDefinition="MEDIUMBLOB")
    private byte[] profileImage;

    // Transient field for new password input (not persisted in the DB)
    @Transient
    private String newPassword;

    // Transient field for confirming new password (not persisted in the DB)
    @Transient
    private String confirmNewPassword;
}
